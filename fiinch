#!/usr/bin/env python3

from subprocess import check_output

import argparse
import coloredlogs
import logging
import logging.handlers
import mimetypes
import os
import re
import sys

IGNORE_REGEXES = frozenset([r".*/\.Trash/.*", r".*/\.vim/undo/.*"])

IGNORE_DETECTED_TYPES = frozenset([r"text/plain"])

EQUIVALENT_BIDIRECTIONAL = [
    frozenset(['application/x-sh', 'text/x-shellscript']),
    frozenset(['image/vnd.microsoft.icon', 'image/x-icon', 'image/x-ico']),
    frozenset(['application/vnd.ms-powerpoint', 'application/vnd.ms-office']),
    frozenset(['application/javascript', 'text/x-c++', 'text/x-c']),
    frozenset(['text/css', 'text/x-c'])
]


def main(argv, syserr_handler):
    parser = argparse.ArgumentParser(description="The file integrity checker. "
                                     "See https://github.com/andrewferrier/fiinch for more information.")

    parser.add_argument('-v', '--verbose', action='count', default=0,
                        help="Make the output more verbose. This affects both the output logged to "
                        "the console. Using this twice makes it doubly verbose.")

    parser.add_argument('--disable-mimetypematch-check', dest='mimetypematch_check', action='store_false',
                        default=True, help="Don't check if the file's MIME "
                        "type (according to file extension) matches the MIME "
                        "type (according to file content)")

    parser.add_argument('filenames', metavar="filename", nargs='+', help='Filenames')

    args = parser.parse_args(argv[1:])

    if syserr_handler:
        if args.verbose > 1:
            syserr_handler.setLevel(logging.DEBUG)
        elif args.verbose == 1:
            syserr_handler.setLevel(logging.INFO)
        else:
            syserr_handler.setLevel(logging.WARNING)

    for filename in args.filenames:
        for root, dirs, files in os.walk(filename):
            for file_one in files:
                full_file_name = os.path.join(root, file_one)

                continue_with_file = True

                for IGNORE_REGEX_PATTERN in IGNORE_REGEXES:
                    if re.fullmatch(IGNORE_REGEX_PATTERN, full_file_name):
                        continue_with_file = False
                        break

                if continue_with_file:
                        check_file(args, full_file_name)


def check_file(args, filename):
    logger = logging.getLogger("fiinch")

    logger.debug("Checking file " + filename)
    assert(os.path.lexists(filename))
    if not os.path.exists(filename):
        logger.warning(filename + " is likely a broken symbolic link.")

    if args.mimetypematch_check:
        check_file_mimetypematch(filename)


def check_file_mimetypematch(filename):
    logger = logging.getLogger("fiinch")

    _, actual_extension = os.path.splitext(filename)

    if not actual_extension == "":
        detected_mime_type = str(check_output(["file", "--brief", "--mime-type", "--keep-going", filename]), 'utf-8').rstrip('\n')
        logger.debug("Detected mime type is " + detected_mime_type)

        for IGNORE_DETECTED_TYPE in IGNORE_DETECTED_TYPES:
            if re.fullmatch(IGNORE_DETECTED_TYPE, detected_mime_type):
                logger.debug("Skipping file " + filename + " because mime type " + detected_mime_type +
                             " matches pattern " + IGNORE_DETECTED_TYPE)
                return

        if actual_extension in mimetypes.types_map:
            expected_mime_types = [mimetypes.types_map[actual_extension]]
            logger.debug("Expected MIME type can be one of " + str(expected_mime_types))
        else:
            expected_mime_types = []

        if actual_extension in mimetypes.common_types:
            common_mime_types = mimetypes.common_types[actual_extension]
            logger.debug("Other common ones " + str(common_mime_types))
        else:
            common_mime_types = []

        if type(expected_mime_types) is str:
            expected_mime_types = [expected_mime_types]
        if type(common_mime_types) is str:
            common_mime_types = [common_mime_types]

        assert(type(common_mime_types) is list)
        assert(type(expected_mime_types) is list)

        total_mime_types = expected_mime_types + common_mime_types

        equivalent_mime_types = []

        for mime_type in total_mime_types:
            equivalents = find_equivalents(mime_type)
            logger.debug("Other equivalents of " + mime_type + ": " + str(equivalents))
            equivalent_mime_types = equivalent_mime_types + equivalents

        assert(type(equivalent_mime_types) is list)

        total_mime_types += equivalent_mime_types

        if len(total_mime_types) > 0:
            if detected_mime_type not in total_mime_types:
                logger.warning("Expected content mismatch. File " + filename +
                               " was expected to have a mime type from " + str(total_mime_types) +
                               " (mime type detected as " + detected_mime_type + ')')
        else:
            logger.debug("No known MIME types for " + actual_extension)


def find_equivalents(mimetype):
    for set in EQUIVALENT_BIDIRECTIONAL:
        if mimetype in set:
            return list(set - frozenset([mimetype]))

    return []


if __name__ == "__main__":
    logger_setup = logging.getLogger("fiinch")
    logger_setup.propagate = False
    logger_setup.setLevel(logging.DEBUG)

    sysErrHandler = logging.StreamHandler(stream=sys.stderr)
    sysErrHandler.setLevel(logging.WARNING)
    sysErrFormatter = coloredlogs.ColoredFormatter('%(levelname)s: %(message)s')
    sysErrHandler.setFormatter(sysErrFormatter)
    logger_setup.addHandler(sysErrHandler)

    main(sys.argv, sysErrHandler)
